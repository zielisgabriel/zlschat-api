name: ZlsChat CI | AWS Deploy

on:
    workflow_dispatch:
    push:
        branches: [main]

jobs:
    deploy:
        environment: API_ENV
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
          - name: "Checkout code"
            uses: actions/checkout@v4

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                role-to-assume: ${{secrets.OIDC_ARN}}
                aws-region: us-east-1

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Build and Push zlschat-api
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: zlschat-api-repo
              IMAGE_TAG: latest
            run: |
              docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
              docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          - name: Build and Push zlschat-redis
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: zlschat-redis-repo
              IMAGE_TAG: latest
            run: |
              docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./redis
              docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          - name: Put secrets to AWS Secrets Manager
            env:
              MONGODB_USER: ${{ secrets.MONGODB_ROOT_USERNAME }}
              MONGODB_PASS: ${{ secrets.MONGODB_ROOT_PASSWORD }}
              RABBITMQ_USER: ${{ secrets.RABBITMQ_DEFAULT_USER }}
              RABBITMQ_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}
              JWT_SECRET: ${{ secrets.JWT_SECRET }}
            run: |
              MONGODB_ROOT_USERNAME=${MONGODB_USER}
              MONGODB_ROOT_PASSWORD=${MONGODB_PASS}
              MONGODB_URI="mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@zlschat-mongo.zlschat.local:27017/zlschat?authSource=admin"
              RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
              RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
              RABBITMQ_URI="amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@zlschat-rabbitmq.zlschat.local:5672/zlschat"
              REDIS_URI="redis://${{secrets.REDIS_USER}}:${{secrets.REDIS_PASS}}@zlschat-redis.zlschat.local:6379/0"
              JWT_SECRET=${JWT_SECRET}

              aws secretsmanager put-secret-value \
                --secret-id zlschat/mongodb_root_username \
                --secret-string "${MONGODB_ROOT_USERNAME}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/mongodb_root_password \
                --secret-string "${MONGODB_ROOT_PASSWORD}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/mongodb_uri \
                --secret-string "${MONGODB_URI}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/rabbitmq_default_user \
                --secret-string "${RABBITMQ_DEFAULT_USER}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/rabbitmq_default_pass \
                --secret-string "${RABBITMQ_DEFAULT_PASS}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/rabbitmq_uri \
                --secret-string "${RABBITMQ_URI}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/redis_uri \
                --secret-string "${REDIS_URI}"
              aws secretsmanager put-secret-value \
                --secret-id zlschat/jwt_secret \
                --secret-string "${JWT_SECRET}"


          - name: Force ECS to deploy new image
            run: |
              aws ecs update-service --cluster zlschat-cluster --service zlschat_api_service --force-new-deployment
              aws ecs update-service --cluster zlschat-cluster --service zlschat-redis-service --force-new-deployment
              aws ecs update-service --cluster zlschat-cluster --service zlschat-mongo-service --force-new-deployment
              aws ecs update-service --cluster zlschat-cluster --service zlschat-rabbitmq-service --force-new-deployment
